---
kind: Namespace
apiVersion: v1
metadata:
  name: postgres
---
apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  name: cluster00
  namespace: postgres
spec:
  teamId: acid
  volume:
    size: 4Gi
    storageClass: longhorn
  numberOfInstances: 1
  preparedDatabases:
    authentik:
      defaultUsers: true
      extensions: {}
      schemas:
        # does not support non-public: https://github.com/goauthentik/authentik/issues/16797
        public:
          defaultRoles: false
          defaultUsers: false
  postgresql:
    version: "17"
    parameters:
      password_encryption: scram-sha-256
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster00.authentik.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: authentik-owner-user.cluster00.credentials.postgresql.acid.zalan.do
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster00.authentik.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster00.authentik.owner
          property: password
---
apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  name: cluster01
  namespace: postgres
spec:
  teamId: acid
  volume:
    size: 8Gi
    storageClass: longhorn
  numberOfInstances: 1
  preparedDatabases:
    manyfold:
      defaultUsers: true
      extensions: {}
      schemas:
        data:
          defaultRoles: false
          defaultUsers: false
    mealie:
      defaultUsers: true
      extensions: {}
      schemas:
        data:
          defaultRoles: false
          defaultUsers: false
    miniflux:
      defaultUsers: true
      extensions: {}
      schemas:
        data:
          defaultRoles: false
          defaultUsers: false
    ryot:
      defaultUsers: true
      extensions: {}
      schemas:
        data:
          defaultRoles: false
          defaultUsers: false
    vikunja:
      defaultUsers: true
      extensions: {}
      schemas:
        data:
          defaultRoles: false
          defaultUsers: false
  postgresql:
    version: "17"
    parameters:
      password_encryption: scram-sha-256
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster01.manyfold.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: manyfold-owner-user.cluster01.credentials.postgresql.acid.zalan.do
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster01.manyfold.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster01.manyfold.owner
          property: password
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster01.mealie.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: mealie-owner-user.cluster01.credentials.postgresql.acid.zalan.do
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster01.mealie.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster01.mealie.owner
          property: password
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster01.miniflux.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: miniflux-owner-user.cluster01.credentials.postgresql.acid.zalan.do
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster01.miniflux.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster01.miniflux.owner
          property: password
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster01.ryot.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: ryot-owner-user.cluster01.credentials.postgresql.acid.zalan.do
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster01.ryot.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster01.ryot.owner
          property: password
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster01.vikunja.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: vikunja-owner-user.cluster01.credentials.postgresql.acid.zalan.do
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster01.vikunja.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster01.vikunja.owner
          property: password
---
apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  name: cluster02
  namespace: postgres
spec:
  teamId: acid
  volume:
    size: 8Gi
    storageClass: longhorn
  numberOfInstances: 1
  preparedDatabases:
    discourse:
      defaultUsers: true
      extensions: {}
      schemas:
        public:
          defaultRoles: false
          defaultUsers: false
  postgresql:
    version: "17"
    parameters:
      password_encryption: scram-sha-256
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster02.discourse.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: discourse-owner-user.cluster02.credentials.postgresql.acid.zalan.do
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster02.discourse.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster02.discourse.owner
          property: password
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster02.superadmin
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: postgres.cluster02.credentials.postgresql.acid.zalan.do
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster02.superadmin
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster02.superadmin
          property: password
---
apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  name: cluster03
  namespace: postgres
spec:
  teamId: acid
  volume:
    size: 8Gi
    storageClass: longhorn
  numberOfInstances: 1
  patroni:
    initdb:
      lc-collate: C
      lc-ctype: C
      encoding: UTF8
  preparedDatabases:
    matrix:
      defaultUsers: true
      extensions: {}
      schemas:
        data:
          defaultRoles: false
          defaultUsers: false
  postgresql:
    version: "17"
    parameters:
      password_encryption: scram-sha-256
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster03.matrix.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: matrix-owner-user.cluster03.credentials.postgresql.acid.zalan.do
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster03.matrix.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster03.matrix.owner
          property: password
---
apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  name: cluster04
  namespace: postgres
spec:
  teamId: acid
  volume:
    size: 2Gi
    storageClass: longhorn
  numberOfInstances: 1
  preparedDatabases:
    kyoo_back:
      defaultUsers: true
      extensions: {}
      schemas:
        # still uses public schema...
        # https://github.com/zoriya/Kyoo/issues/536
        public:
          defaultRoles: false
          defaultUsers: false
    kyoo_transcoder:
      defaultUsers: true
      extensions: {}
      schemas:
        data:
          defaultRoles: false
          defaultUsers: false
  postgresql:
    version: "17"
    parameters:
      password_encryption: scram-sha-256
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster04.kyoo-back.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: kyoo-back-owner-user.cluster04.credentials.postgresql.acid.zalan.do
  template:
    data:
      _metadata_origin: "push"
      test123: "{{ .username | toString }}"
      username: "{{ .username | toString }}"
      password: "{{ .password | toString }}"
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster04.kyoo_back.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster04.kyoo_back.owner
          property: password
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: cluster04.kyoo-transcoder.owner
  namespace: postgres
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRefs:
    - name: 1password
      kind: ClusterSecretStore
  selector:
    secret:
      name: kyoo-transcoder-owner-user.cluster04.credentials.postgresql.acid.zalan.do
  template:
    data:
      _metadata_origin: "push"
      test123: "{{ .username | toString }}"
      username: "{{ .username | toString }}"
      password: "{{ .password | toString }}"
  data:
    - match:
        secretKey: username
        remoteRef:
          remoteKey: postgres.cluster04.kyoo_transcoder.owner
          property: username
    - match:
        secretKey: password
        remoteRef:
          remoteKey: postgres.cluster04.kyoo_transcoder.owner
          property: password
# ---
# apiVersion: acid.zalan.do/v1
# kind: postgresql
# metadata:
#   name: cluster05
#   namespace: postgres
# spec:
#   teamId: acid
#   volume:
#     size: 2Gi
#     storageClass: longhorn
#   numberOfInstances: 1
#   preparedDatabases:
#     publictestdb:
#       defaultUsers: true
#       extensions: {}
#       schemas:
#         public:
#           defaultRoles: false
#           defaultUsers: false
#     datatestdb:
#       defaultUsers: true
#       extensions: {}
#       schemas:
#         data:
#           defaultRoles: false
#           defaultUsers: false
#   postgresql:
#     version: "16"
#     parameters:
#       password_encryption: scram-sha-256
# ---
# apiVersion: external-secrets.io/v1alpha1
# kind: PushSecret
# metadata:
#   name: cluster05.publictestdb.owner
#   namespace: postgres
#   annotations:
#     argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
# spec:
#   refreshInterval: "5m"
#   secretStoreRefs:
#     - name: 1password
#       kind: ClusterSecretStore
#   selector:
#     secret:
#       name: publictestdb-owner-user.cluster05.credentials.postgresql.acid.zalan.do
#   data:
#     - match:
#         secretKey: username
#         remoteRef:
#           remoteKey: postgres.cluster05.publictestdb.owner
#           property: username
#     - match:
#         secretKey: password
#         remoteRef:
#           remoteKey: postgres.cluster05.publictestdb.owner
#           property: password
# ---
# apiVersion: external-secrets.io/v1alpha1
# kind: PushSecret
# metadata:
#   name: cluster05.datatestdb.owner
#   namespace: postgres
#   annotations:
#     argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
# spec:
#   refreshInterval: "5m"
#   secretStoreRefs:
#     - name: 1password
#       kind: ClusterSecretStore
#   selector:
#     secret:
#       name: datatestdb-owner-user.cluster05.credentials.postgresql.acid.zalan.do
#   data:
#     - match:
#         secretKey: username
#         remoteRef:
#           remoteKey: postgres.cluster05.datatestdb.owner
#           property: username
#     - match:
#         secretKey: password
#         remoteRef:
#           remoteKey: postgres.cluster05.datatestdb.owner
#           property: password