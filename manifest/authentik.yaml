kind: Namespace
apiVersion: v1
metadata:
  name: authentik
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: authentik-configsecrets
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: bootstrap_password
      remoteRef:
        key: authentik
        property: bootstrap_password
    - secretKey: bootstrap_token
      remoteRef:
        key: authentik
        property: bootstrap_token
    - secretKey: bootstrap_email
      remoteRef:
        key: authentik
        property: bootstrap_email
    - secretKey: secret_key
      remoteRef:
        key: authentik
        property: secret_key
    - secretKey: postgrespassword
      remoteRef:
        key: authentik
        property: postgrespassword
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: authentik
  namespace: argocd
spec:
  destination:
    namespace: authentik
    server: https://kubernetes.default.svc
  project: homelab
  source:
    chart: authentik
    repoURL: https://charts.goauthentik.io
    targetRevision: 2023.5.4
    helm:
      values: |
        ingress:
            enabled: true
            ingressClassName: ingress-nginx-internal
            annotations:
              external-dns.custom/type: private
              external-dns.alpha.kubernetes.io/hostname: "authentik.<path:vaults/homelab/items/stringreplacesecret#domain>"
              external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
            hosts:
                - host: authentik.<path:vaults/homelab/items/stringreplacesecret#domain>
                  paths:
                      - path: "/"
                        pathType: Prefix
        postgresql:
            enabled: true
            postgresqlPassword: "<path:vaults/homelab/items/authentik#postgrespassword>"
            persistence:
              size: 4Gi
        redis:
            enabled: true
            master:
              persistence:
                enabled: false
        envValueFrom:
          AUTHENTIK_SECRET_KEY:
            secretKeyRef:
              key: secret_key
              name: authentik-configsecrets
          AUTHENTIK_POSTGRESQL__PASSWORD:
            secretKeyRef:
              key: postgrespassword
              name: authentik-configsecrets
          AUTHENTIK_BOOTSTRAP_PASSWORD:
            secretKeyRef:
              key: bootstrap_password
              name: authentik-configsecrets
          AUTHENTIK_BOOTSTRAP_TOKEN:
            secretKeyRef:
              key: bootstrap_token
              name: authentik-configsecrets
          AUTHENTIK_BOOTSTRAP_EMAIL:
            secretKeyRef:
              key: bootstrap_email
              name: authentik-configsecrets
  syncPolicy:
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: authentik-providerconfig
  namespace: authentik
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: token
      remoteRef:
        key: authentik
        property: bootstrap_token
---
apiVersion: tf.upbound.io/v1beta1
kind: ProviderConfig
metadata:
  name: authentik-config
spec:
  credentials:
    - source: Secret
      filename: token
      secretRef:
        namespace: authentik
        name: authentik-providerconfig
        key: token
  configuration: |
    provider "authentik" {
      url   = "http://authentik.<path:vaults/homelab/items/stringreplacesecret#domain>"
      token = file("${path.module}/token")
    }

    terraform {
      required_providers {
        authentik = {
          source = "goauthentik/authentik"
          version = "2023.5.0"
        }
      }
      backend "kubernetes" {
        secret_suffix     = "authentik-provider"
        namespace         = "authentik"
        in_cluster_config = true
      }
    }
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sso-secret
  namespace: authentik
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
    template:
      data:
        sso.tfvars: |
          grafana_token = "{{ .grafana_token | toString }}"
  data:
    - secretKey: grafana_token
      remoteRef:
        key: sso-secret
        property: grafana
---
apiVersion: tf.upbound.io/v1beta1
kind: Workspace
metadata:
  name: authentik-grafana
spec:
  providerConfigRef:
    name: authentik-config
  forProvider:
    varFiles:
      - source: SecretKey
        secretKeyRef:
          key: sso.tfvars
          name: sso-secret
          namespace: authentik
    source: Inline
    module: |
      variable "grafana_token" {}

      data "authentik_certificate_key_pair" "generated" {
        name = "authentik Self-signed Certificate"
      }

      data "authentik_flow" "default-authorization-flow" {
        slug = "default-provider-authorization-implicit-consent"
      }

      data "authentik_scope_mapping" "email" {
        managed = "goauthentik.io/providers/oauth2/scope-email"
      }

      data "authentik_scope_mapping" "profile" {
        managed = "goauthentik.io/providers/oauth2/scope-profile"
      }

      data "authentik_scope_mapping" "openid" {
        managed = "goauthentik.io/providers/oauth2/scope-openid"
      }


      resource "authentik_group" "grafana_admin" {
        name         = "Grafana Admin"
        is_superuser = false
      }

      resource "authentik_provider_oauth2" "grafana_ouath2" {
        name      = "grafana"
        client_id = "grafana"
        client_secret = var.grafana_token
        authorization_flow = data.authentik_flow.default-authorization-flow.id
        access_code_validity = "minutes=10"
        redirect_uris = [ "http://grafana.<path:vaults/homelab/items/stringreplacesecret#domain>/login/generic_oauth"]
        signing_key = data.authentik_certificate_key_pair.generated.id
        property_mappings = [
          data.authentik_scope_mapping.openid.id,
          data.authentik_scope_mapping.email.id,
          data.authentik_scope_mapping.profile.id
        ]
      }

      resource "authentik_application" "grafana_application" {
        name = authentik_provider_oauth2.grafana_ouath2.name
        slug = authentik_provider_oauth2.grafana_ouath2.name
        protocol_provider = authentik_provider_oauth2.grafana_ouath2.id
        meta_icon = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a1/Grafana_logo.svg/768px-Grafana_logo.svg.png"
        meta_launch_url = "http://grafana.<path:vaults/homelab/items/stringreplacesecret#domain>/login/generic_oauth"
        policy_engine_mode = "all"
      }
