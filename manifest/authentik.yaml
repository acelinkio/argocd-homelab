kind: Namespace
apiVersion: v1
metadata:
  name: authentik
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: authentik-configsecrets
  namespace: authentik
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: bootstrap_password
      remoteRef:
        key: authentik
        property: bootstrap_password
    - secretKey: bootstrap_token
      remoteRef:
        key: authentik
        property: bootstrap_token
    - secretKey: bootstrap_email
      remoteRef:
        key: authentik
        property: bootstrap_email
    - secretKey: secret_key
      remoteRef:
        key: authentik
        property: secret_key
    - secretKey: postgrespassword
      remoteRef:
        key: authentik
        property: postgrespassword
    - secretKey: postgresuserpassword
      remoteRef:
        key: authentik
        property: postgresuserpassword
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: authentik-postgres
  namespace: argocd
spec:
  destination:
    namespace: authentik
    server: https://kubernetes.default.svc
  project: homelab
  source:
    chart: postgresql
    repoURL: https://charts.bitnami.com/bitnami
    targetRevision: 14.0.5
    helm:
      valuesObject:
        fullnameOverride: authentik-postgres
        auth:
          username: authentik
          database: authentik
          existingSecret: authentik-configsecrets
          secretKeys:
            adminPasswordKey: postgrespassword
            userPasswordKey: postgresuserpassword
        primary:
          persistence:
            size: 4Gi
  syncPolicy:
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: authentik
  namespace: argocd
spec:
  destination:
    namespace: authentik
    server: https://kubernetes.default.svc
  project: homelab
  source:
    chart: authentik
    repoURL: https://charts.goauthentik.io
    targetRevision: 2023.10.7
    helm:
      valuesObject:
        ingress:
          enabled: false
        authentik:
          postgresql:
            host: "authentik-postgres.authentik"
            name: "authentik"
            user: "authentik"
        redis:
            enabled: true
            master:
              persistence:
                enabled: false
        envValueFrom:
          AUTHENTIK_SECRET_KEY:
            secretKeyRef:
              key: secret_key
              name: authentik-configsecrets
          AUTHENTIK_POSTGRESQL__PASSWORD:
            secretKeyRef:
              key: postgresuserpassword
              name: authentik-configsecrets
          AUTHENTIK_BOOTSTRAP_PASSWORD:
            secretKeyRef:
              key: bootstrap_password
              name: authentik-configsecrets
          AUTHENTIK_BOOTSTRAP_TOKEN:
            secretKeyRef:
              key: bootstrap_token
              name: authentik-configsecrets
          AUTHENTIK_BOOTSTRAP_EMAIL:
            secretKeyRef:
              key: bootstrap_email
              name: authentik-configsecrets
  syncPolicy:
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: auth
  namespace: authentik
spec:
  ingressClassName: ingress-nginx-internal
  rules:
    - host: auth.<path:stringreplacesecret#domain>
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: authentik
                port:
                  number: 80
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: authentik
  namespace: authentik
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  hostnames:
  - "auth.<path:stringreplacesecret#domain>"
  rules:
  - backendRefs:
    - name: authentik
      port: 80
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: authentik
  namespace: authentik
  annotations:
    external-dns.custom/type: private
spec:
  endpoints:
    - dnsName: auth.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intin.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: authentik-providerconfig
  namespace: authentik
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: token
      remoteRef:
        key: authentik
        property: bootstrap_token
---
apiVersion: tf.upbound.io/v1beta1
kind: ProviderConfig
metadata:
  name: authentik-config
spec:
  credentials:
    - source: Secret
      filename: token
      secretRef:
        namespace: authentik
        name: authentik-providerconfig
        key: token
  configuration: |
    provider "authentik" {
      url   = "https://auth.<path:stringreplacesecret#domain>"
      token = file("${path.module}/token")
    }

    terraform {
      required_providers {
        authentik = {
          source = "goauthentik/authentik"
          version = "2023.10.0"
        }
      }
      backend "kubernetes" {
        secret_suffix     = "authentik-provider"
        namespace         = "authentik"
        in_cluster_config = true
      }
    }
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sso
  namespace: authentik
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
    template:
      data:
        sso.tfvars: |
          grafana_token = "{{ .grafana_token | toString }}"
          argocd_token = "{{ .argocd_token | toString }}"
          vikunja_token = "{{ .vikunja_token | toString }}"
  data:
    - secretKey: grafana_token
      remoteRef:
        key: sso
        property: grafana
    - secretKey: argocd_token
      remoteRef:
        key: sso
        property: argocd
    - secretKey: vikunja_token
      remoteRef:
        key: sso
        property: vikunja
---
apiVersion: tf.upbound.io/v1beta1
kind: Workspace
metadata:
  name: authentik-sso
spec:
  providerConfigRef:
    name: authentik-config
  forProvider:
    varFiles:
      - source: SecretKey
        secretKeyRef:
          key: sso.tfvars
          name: sso
          namespace: authentik
    source: Inline
    module: |
      variable "argocd_token" {}
      variable "grafana_token" {}
      variable "vikunja_token" {}

      data "authentik_certificate_key_pair" "generated" {
        name = "authentik Self-signed Certificate"
      }

      data "authentik_flow" "default-authorization-flow" {
        slug = "default-provider-authorization-implicit-consent"
      }

      data "authentik_scope_mapping" "email" {
        managed = "goauthentik.io/providers/oauth2/scope-email"
      }

      data "authentik_scope_mapping" "profile" {
        managed = "goauthentik.io/providers/oauth2/scope-profile"
      }

      data "authentik_scope_mapping" "openid" {
        managed = "goauthentik.io/providers/oauth2/scope-openid"
      }


      resource "authentik_group" "grafana_admin" {
        name         = "Grafana Admin"
        is_superuser = false
      }

      resource "authentik_provider_oauth2" "grafana_ouath2" {
        name      = "grafana"
        client_id = "grafana"
        client_secret = var.grafana_token
        authorization_flow = data.authentik_flow.default-authorization-flow.id
        access_code_validity = "minutes=10"
        redirect_uris = [ "https://grafana.<path:stringreplacesecret#domain>/login/generic_oauth"]
        signing_key = data.authentik_certificate_key_pair.generated.id
        property_mappings = [
          data.authentik_scope_mapping.openid.id,
          data.authentik_scope_mapping.email.id,
          data.authentik_scope_mapping.profile.id
        ]
      }

      resource "authentik_application" "grafana_application" {
        name = authentik_provider_oauth2.grafana_ouath2.name
        slug = authentik_provider_oauth2.grafana_ouath2.name
        protocol_provider = authentik_provider_oauth2.grafana_ouath2.id
        meta_icon = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a1/Grafana_logo.svg/768px-Grafana_logo.svg.png"
        meta_launch_url = "https://grafana.<path:stringreplacesecret#domain>/login/generic_oauth"
        policy_engine_mode = "all"
      }

      resource "authentik_group" "argocd_admin" {
        name         = "ArgoCD Admin"
        is_superuser = false
      }

      resource "authentik_provider_oauth2" "argocd_ouath2" {
        name      = "argocd"
        client_id = "argocd"
        client_secret = var.argocd_token
        authorization_flow = data.authentik_flow.default-authorization-flow.id
        access_code_validity = "minutes=10"
        redirect_uris = [ "https://argocd.<path:stringreplacesecret#domain>/api/dex/callback","http://localhost:8085/auth/callback"]
        signing_key = data.authentik_certificate_key_pair.generated.id
        property_mappings = [
          data.authentik_scope_mapping.openid.id,
          data.authentik_scope_mapping.email.id,
          data.authentik_scope_mapping.profile.id
        ]
      }

      resource "authentik_application" "argocd_application" {
        name = authentik_provider_oauth2.argocd_ouath2.name
        slug = authentik_provider_oauth2.argocd_ouath2.name
        protocol_provider = authentik_provider_oauth2.argocd_ouath2.id
        meta_icon = "https://landscape.cncf.io/logos/argo.svg"
        meta_launch_url = "https://argocd.<path:stringreplacesecret#domain>/auth/login"
        policy_engine_mode = "all"
      }

      resource "authentik_group" "vikunja_admin" {
        name         = "Vikunja Admin"
        is_superuser = false
      }

      resource "authentik_provider_oauth2" "vikunja_ouath2" {
        name      = "vikunja"
        client_id = "vikunja"
        client_secret = var.vikunja_token
        authorization_flow = data.authentik_flow.default-authorization-flow.id
        access_code_validity = "minutes=10"
        redirect_uris = [ "https://tasks.<path:stringreplacesecret#domain>/auth/openid/authentik"]
        signing_key = data.authentik_certificate_key_pair.generated.id
        property_mappings = [
          data.authentik_scope_mapping.openid.id,
          data.authentik_scope_mapping.email.id,
          data.authentik_scope_mapping.profile.id
        ]
      }

      resource "authentik_application" "vikunja_application" {
        name = authentik_provider_oauth2.vikunja_ouath2.name
        slug = authentik_provider_oauth2.vikunja_ouath2.name
        protocol_provider = authentik_provider_oauth2.vikunja_ouath2.id
        meta_icon = "https://kolaente.dev/avatars/dd73c49581a6904336c5d40fb66ef950?size=280"
        meta_launch_url = "https://tasks.<path:stringreplacesecret#domain>/?redirectToProvider=true"
        policy_engine_mode = "all"
      }