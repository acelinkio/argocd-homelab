---
kind: Namespace
apiVersion: v1
metadata:
  name: kyoo
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sso
  namespace: kyoo
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: clientId
      remoteRef:
        key: sso
        property: kyoo_client_id
    - secretKey: clientSecret
      remoteRef:
        key: sso
        property: kyoo_client_secret
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: misc
  namespace: kyoo
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: kyoo_apikeys
      remoteRef:
        key: kyoo
        property: kyoo_apikeys
    - secretKey: tmdb_apikey
      remoteRef:
        key: kyoo
        property: tmdb_apikey
    - secretKey: tvdb_apikey
      remoteRef:
        key: kyoo
        property: tvdb_apikey
    - secretKey: tvdb_pin
      remoteRef:
        key: kyoo
        property: tvdb_pin
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyoo-autosync
  namespace: kyoo
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: rabbitmq_user
      remoteRef:
        key: rabbitmq.cluster01.kyoo_autosync
        property: username
    - secretKey: rabbitmq_password
      remoteRef:
        key: rabbitmq.cluster01.kyoo_autosync
        property: password
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyoo-back
  namespace: kyoo
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: MEILI_MASTER_KEY
      remoteRef:
        key: kyoo.meilisearch
        property: masterkey
    - secretKey: postgres_user
      remoteRef:
        key: postgres.cluster01.kyoo_back.owner
        property: username
    - secretKey: postgres_password
      remoteRef:
        key: postgres.cluster01.kyoo_back.owner
        property: password
    - secretKey: rabbitmq_user
      remoteRef:
        key: rabbitmq.cluster01.kyoo_backend
        property: username
    - secretKey: rabbitmq_password
      remoteRef:
        key: rabbitmq.cluster01.kyoo_backend
        property: password
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyoo-matcher
  namespace: kyoo
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: rabbitmq_user
      remoteRef:
        key: rabbitmq.cluster01.kyoo_matcher
        property: username
    - secretKey: rabbitmq_password
      remoteRef:
        key: rabbitmq.cluster01.kyoo_matcher
        property: password
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyoo-scanner
  namespace: kyoo
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: rabbitmq_user
      remoteRef:
        key: rabbitmq.cluster01.kyoo_scanner
        property: username
    - secretKey: rabbitmq_password
      remoteRef:
        key: rabbitmq.cluster01.kyoo_scanner
        property: password
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyoo-transcoder
  namespace: kyoo
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: postgres_user
      remoteRef:
        key: postgres.cluster01.kyoo_transcoder.owner
        property: username
    - secretKey: postgres_password
      remoteRef:
        key: postgres.cluster01.kyoo_transcoder.owner
        property: password
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: meilisearch-masterkey
  namespace: kyoo
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: MEILI_MASTER_KEY
      remoteRef:
        key: kyoo.meilisearch
        property: masterkey
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kyoo-meilisearch
  namespace: argocd
spec:
  destination:
    namespace: kyoo
    server: https://kubernetes.default.svc
  project: homelab
  source:
    chart: meilisearch
    repoURL: https://meilisearch.github.io/meilisearch-kubernetes
    targetRevision: 0.11.0
    helm:
      valuesObject:
        environment:
          MEILI_ENV: production
        auth:
          existingMasterKeySecret: meilisearch-masterkey
        persistence:
          enabled: true
          size: 3Gi
  syncPolicy:
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kyoo
  namespace: argocd
spec:
  destination:
    namespace: kyoo
    server: https://kubernetes.default.svc
  project: homelab
  source:
    path: chart/
    repoURL: https://github.com/zoriya/Kyoo.git
    targetRevision: master
    helm:
      valuesObject:
        global:
          image:
            tag: "4.7.0"
          meilisearch:
            kyoo_back:
              existingSecret: kyoo-back
          postgres:
            kyoo_back:
              host: cluster01.postgres
              kyoo_migrations:
                existingSecret: kyoo-back
              kyoo_back:
                existingSecret: kyoo-back
            kyoo_transcoder:
              host: cluster01.postgres
              kyoo_transcoder:
                existingSecret: kyoo-transcoder
          rabbitmq:
            host: cluster01.rabbitmq
            kyoo_autosync:
              existingSecret: kyoo-autosync
            kyoo_back:
              existingSecret: kyoo-back
            kyoo_matcher:
              existingSecret: kyoo-matcher
            kyoo_scanner:
              existingSecret: kyoo-scanner
        contentdatabase:
          tmdb:
            existingSecret: misc
          tvdb:
            existingSecret: misc
        kyoo:
          address: https://kyoo.<path:stringreplacesecret#domain>
          apikey:
            existingSecret: misc
          oidc_providers:
            - name: Authentik
              logo: https://avatars.githubusercontent.com/u/82976448?s=48&v=4
              existingSecret: sso
              clientIdKey: clientId
              clientSecretKey: clientSecret
              scope: "email openid profile"
              authMethod: ClientSecretBasic
              authorizationAddress: https://auth.<path:stringreplacesecret#domain>/application/o/authorize/
              tokenAddress: https://auth.<path:stringreplacesecret#domain>/application/o/token/
              profileAddress: https://auth.<path:stringreplacesecret#domain>/application/o/userinfo/
        media:
          volumes:
            - name: media
              nfs:
                server: nassy.pinahouse
                path: /spin0/media
          volumeMounts:
            - name: media
              mountPath: /media
              readOnly: true
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: kyoo-public
  namespace: kyoo
  annotations:
    external-dns.custom/type: public
spec:
  endpoints:
    - dnsName: kyoo.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - ingress.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "true"
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: kyoo-private
  namespace: kyoo
  annotations:
    external-dns.custom/type: private
spec:
  endpoints:
    - dnsName: kyoo.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: kyoo
  namespace: kyoo
spec:
  parentRefs:
    - name: internal
      namespace: gateway
      sectionName: https
    - name: external
      namespace: gateway
      sectionName: https
  hostnames:
    - "kyoo.<path:stringreplacesecret#domain>"
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /api
      backendRefs:
        - name: kyoo-back
          port: 5000
      filters:
        - type: URLRewrite
          urlRewrite:
            path:
              type: ReplacePrefixMatch
              replacePrefixMatch: /
    - matches:
        - path:
            type: PathPrefix
            value: /
      backendRefs:
        - name: kyoo-front
          port: 8901
