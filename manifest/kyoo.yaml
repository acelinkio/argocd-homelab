---
kind: Namespace
apiVersion: v1
metadata:
  name: kyoo
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kyoo
  namespace: argocd
spec:
  destination:
    namespace: kyoo
    server: https://kubernetes.default.svc
  project: homelab
  source:
    path: chart/
    repoURL: https://github.com/acelinkio/Kyoo.git
    targetRevision: feature/helmchart
    helm:
      valuesObject:
        kyoo:
          address: https://kyoo.<path:stringreplacesecret#domain>
        meilisearch:
          enabled: true
        postgresql:
          enabled: true
        rabbitmq:
          enabled: true
        back:
          kyoo_back:
            extraEnv:
              - name: OIDC_SERVICE_NAME
                value: authentik
              - name: OIDC_SERVICE_LOGO
                value: https://avatars.githubusercontent.com/u/82976448?s=48&v=4
              - name: OIDC_SERVICE_CLIENTID
                value: kyoo
              - name: OIDC_SERVICE_SECRET
                value: mysupersecretsecret
              - name: OIDC_SERVICE_AUTHORIZATION
                value: https://auth.acelink.io/application/o/authorize/
              - name: OIDC_SERVICE_TOKEN
                value: https://auth.acelink.io/application/o/token/
              - name: OIDC_SERVICE_PROFILE
                value: https://auth.acelink.io/application/o/userinfo/
              - name: OIDC_SERVICE_SCOPE
                value: "email openid profile"
        extraObjects:
          - apiVersion: v1
            kind: Secret
            metadata:
              name: bigsecret
            type: Opaque
            stringData:
              kyoo_apikeys: yHXWGsjfjE6sy6UxavqmTUYxgCFYek
              tmdb_apikey: ""
              tvdb_apikey: ""
              tvdb_pin: ""
              MEILI_MASTER_KEY: barkLike8SuperDucks
              postgres_user: kyoo_all
              postgres_password: watchSomething4me
              rabbitmq_user: kyoo_all
              rabbitmq_password: youAreAmazing2
              rabbitmq_cookie: mmmGoodCookie
          - kind: PersistentVolumeClaim
            apiVersion: v1
            metadata:
              name: back-storage
            spec:
              accessModes:
                - "ReadWriteMany"
              resources:
                requests:
                  storage: "3Gi"
          - kind: PersistentVolumeClaim
            apiVersion: v1
            metadata:
              name: media
            spec:
              accessModes:
                - "ReadWriteMany"
              resources:
                requests:
                  storage: "3Gi"
          - kind: PersistentVolumeClaim
            apiVersion: v1
            metadata:
              name: transcoder-storage
            spec:
              accessModes:
                - "ReadWriteMany"
              resources:
                requests:
                  storage: "3Gi"
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: kyoo
  namespace: kyoo
  annotations:
    external-dns.custom/type: private
spec:
  endpoints:
    - dnsName: kyoo.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: kyoo
  namespace: kyoo
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  # - name: external
  #   namespace: gateway
  #   sectionName: https
  hostnames:
  - "kyoo.<path:stringreplacesecret#domain>"
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /api
    backendRefs:
    - name: kyoo-back
      port: 5000
    filters:
      - type: URLRewrite
        urlRewrite:
          path:
            type: ReplacePrefixMatch
            replacePrefixMatch: /
  - matches:
    - path:
        type: PathPrefix
        value: /
    backendRefs:
    - name: kyoo-front
      port: 8901