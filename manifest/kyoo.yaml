---
kind: Namespace
apiVersion: v1
metadata:
  name: kyoo
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: meilisearch-master-key
  namespace: kyoo
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: MEILI_MASTER_KEY
      remoteRef:
        key: kyoo
        property: meilisearch_master_key
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kyoo-meilisearch
  namespace: argocd
spec:
  destination:
    namespace: kyoo
    server: https://kubernetes.default.svc
  project: homelab
  source:
    chart: meilisearch
    repoURL: https://meilisearch.github.io/meilisearch-kubernetes
    targetRevision: 0.7.0
    helm:
      releaseName: meilisearch
      valuesObject:
        environment:
          MEILI_ENV: production
        auth:
          existingMasterKeySecret: meilisearch-master-key
        persistence:
          enabled: true
          size: 3Gi
          storageClass: longhorn
  syncPolicy:
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyoo-backend
  namespace: kyoo
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: meilisearchmasterkey
      remoteRef:
        key: kyoo
        property: meilisearch_master_key
    - secretKey: apikeys
      remoteRef:
        key: kyoo
        property: backend_apikeys
    - secretKey: postgrespassword
      remoteRef:
        key: postgres.cluster02.kyoo.owner
        property: password
    - secretKey: postgresuser
      remoteRef:
        key: postgres.cluster02.kyoo.owner
        property: username
    - secretKey: rabbitmqpassword
      remoteRef:
        key: rabbitmq.cluster01.kyoo-backend
        property: password
    - secretKey: rabbitmquser
      remoteRef:
        key: rabbitmq.cluster01.kyoo-backend
        property: username
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kyoo-back
  namespace: kyoo
  labels:
    app.kubernetes.io/component: back
    app.kubernetes.io/instance: kyoo
    app.kubernetes.io/name: kyoo
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/component: back
      app.kubernetes.io/name: kyoo
      app.kubernetes.io/instance: kyoo
  template:
    metadata:
      labels:
        app.kubernetes.io/component: back
        app.kubernetes.io/instance: kyoo
        app.kubernetes.io/name: kyoo
    spec:
      initContainers:
        - env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: postgresuser
                  name: kyoo-backend
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgrespassword
                  name: kyoo-backend
            - name: POSTGRES_DB
              value: kyoo
            - name: POSTGRES_SERVER
              value: cluster02.postgres
            - name: POSTGRES_PORT
              value: "5432"
          image: ghcr.io/zoriya/kyoo_migrations:edge
          name: postgres-migration
      containers:
        - env:
            - name: TRANSCODER_URL
              value: http://transcoder.kyoo:7666
            - name: PUBLIC_URL
              value: https://kyoo.<path:stringreplacesecret#domain>
            - name: UNLOGGED_PERMISSIONS
              value: overall.read,overall.play
            - name: KYOO_APIKEYS
              valueFrom:
                secretKeyRef:
                  key: apikeys
                  name: kyoo-backend
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: postgresuser
                  name: kyoo-backend
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgrespassword
                  name: kyoo-backend
            - name: POSTGRES_DB
              value: kyoo
            - name: POSTGRES_SERVER
              value: cluster02.postgres
            - name: POSTGRES_PORT
              value: "5432"
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:
                  key: rabbitmquser
                  name: kyoo-backend
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  key: rabbitmqpassword
                  name: kyoo-backend
            - name: RABBITMQ_HOST
              value: cluster01.rabbitmq
            # https://github.com/zoriya/Kyoo/pull/545
            - name: RABBITMQ_Port
              value: "5672"
            - name: MEILI_HOST
              value: http://meilisearch.kyoo:7700
            - name: MEILI_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  key: meilisearchmasterkey
                  name: kyoo-backend
          image: ghcr.io/zoriya/kyoo_back:edge
          name: backend
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          resources:
            limits:
              cpu: 4000m
              memory: 4Gi
            requests:
              cpu: 10m
              memory: 1Gi
          volumeMounts:
            - mountPath: /metadata
              name: backend
            - mountPath: /data
              name: media
              #readOnly: true
              subPath: media
      volumes:
        - name: backend
          persistentVolumeClaim:
            claimName: backend
        - name: media
          persistentVolumeClaim:
            claimName: media
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: kyoo
  labels:
    app.kubernetes.io/instance: kyoo
    app.kubernetes.io/name: kyoo
    app.kubernetes.io/service: kyoo-back
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: 5000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: back
    app.kubernetes.io/instance: kyoo
    app.kubernetes.io/name: kyoo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kyoo-transcoder
  namespace: kyoo
  labels:
    app.kubernetes.io/component: transcoder
    app.kubernetes.io/instance: kyoo
    app.kubernetes.io/name: kyoo
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/component: transcoder
      app.kubernetes.io/name: kyoo
      app.kubernetes.io/instance: kyoo
  template:
    metadata:
      labels:
        app.kubernetes.io/component: transcoder
        app.kubernetes.io/instance: kyoo
        app.kubernetes.io/name: kyoo
    spec:
      containers:
        - env:
            - name: GOCODER_HWACCEL
              value: disabled
            - name: GOCODER_PRESET
              value: fast
            - name: GOCODER_CACHE_ROOT
              value: /cache
            - name: GOCODER_METADATA_ROOT
              value: /metadata
            - name: GOCODER_PREFIX
              value: /video
            - name: GOCODER_SAFE_PATH
              value: /data
          image: ghcr.io/zoriya/kyoo_transcoder:edge
          name: transcoder
          ports:
            - name: http
              containerPort: 7666
              protocol: TCP
          resources:
            requests:
              cpu: 10m
              memory: 500Mi
          volumeMounts:
            - mountPath: /cache
              name: cache
            - mountPath: /data
              name: media
              readOnly: true
              subPath: media
            - mountPath: /metadata
              name: transcoder
      volumes:
        - name: cache
          emptyDir: {}
        - name: media
          persistentVolumeClaim:
            claimName: media
        - name: transcoder
          persistentVolumeClaim:
            claimName: transcoder
---
apiVersion: v1
kind: Service
metadata:
  name: transcoder
  namespace: kyoo
  labels:
    app.kubernetes.io/instance: kyoo
    app.kubernetes.io/name: kyoo
    app.kubernetes.io/service: kyoo-transcoder
spec:
  type: ClusterIP
  ports:
    - port: 7666
      targetPort: 7666
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: transcoder
    app.kubernetes.io/instance: kyoo
    app.kubernetes.io/name: kyoo
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyoo-matcher
  namespace: kyoo
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: backend_apikeys
      remoteRef:
        key: kyoo
        property: backend_apikeys
    - secretKey: tmdb_apikey
      remoteRef:
        key: kyoo
        property: tmdb_apikey
    - secretKey: rabbitmqpassword
      remoteRef:
        key: rabbitmq.cluster01.kyoo-matcher
        property: password
    - secretKey: rabbitmquser
      remoteRef:
        key: rabbitmq.cluster01.kyoo-matcher
        property: username
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kyoo-matcher
  namespace: kyoo
  labels:
    app.kubernetes.io/component: matcher
    app.kubernetes.io/instance: kyoo
    app.kubernetes.io/name: kyoo
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/component: matcher
      app.kubernetes.io/name: kyoo
      app.kubernetes.io/instance: kyoo
  template:
    metadata:
      labels:
        app.kubernetes.io/component: matcher
        app.kubernetes.io/instance: kyoo
        app.kubernetes.io/name: kyoo
    spec:
      containers:
        - args:
            - matcher
          env:
            - name: SCANNER_LIBRARY_ROOT
              value: /data
            - name: KYOO_APIKEYS
              valueFrom:
                secretKeyRef:
                  key: backend_apikeys
                  name: kyoo-matcher
            - name: KYOO_URL
              value: http://backend.kyoo:5000
            - name: LIBRARY_LANGUAGES
              value: en
            - name: THEMOVIEDB_APIKEY
              valueFrom:
                secretKeyRef:
                  key: tmdb_apikey
                  name: kyoo-matcher
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:
                  key: rabbitmquser
                  name: kyoo-matcher
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  key: rabbitmqpassword
                  name: kyoo-matcher
            - name: RABBITMQ_HOST
              value: cluster01.rabbitmq
            - name: RABBITMQ_PORT
              value: "5672"
          image: ghcr.io/zoriya/kyoo_scanner:edge
          name: matcher
          resources:
            requests:
              cpu: 10m
              memory: 500Mi
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyoo-scanner
  namespace: kyoo
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: backend_apikeys
      remoteRef:
        key: kyoo
        property: backend_apikeys
    - secretKey: tmdb_apikey
      remoteRef:
        key: kyoo
        property: tmdb_apikey
    - secretKey: rabbitmqpassword
      remoteRef:
        key: rabbitmq.cluster01.kyoo-scanner
        property: password
    - secretKey: rabbitmquser
      remoteRef:
        key: rabbitmq.cluster01.kyoo-scanner
        property: username
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kyoo-scanner
  namespace: kyoo
  labels:
    app.kubernetes.io/component: scanner
    app.kubernetes.io/instance: kyoo
    app.kubernetes.io/name: kyoo
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/component: scanner
      app.kubernetes.io/name: kyoo
      app.kubernetes.io/instance: kyoo
  template:
    metadata:
      labels:
        app.kubernetes.io/component: scanner
        app.kubernetes.io/instance: kyoo
        app.kubernetes.io/name: kyoo
    spec:
      containers:
        - env:
            - name: SCANNER_LIBRARY_ROOT
              value: /data
            - name: KYOO_APIKEYS
              valueFrom:
                secretKeyRef:
                  key: backend_apikeys
                  name: kyoo-scanner
            - name: KYOO_URL
              value: http://backend.kyoo:5000
            - name: LIBRARY_LANGUAGES
              value: en
            - name: THEMOVIEDB_APIKEY
              valueFrom:
                secretKeyRef:
                  key: tmdb_apikey
                  name: kyoo-scanner
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:
                  key: rabbitmquser
                  name: kyoo-scanner
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  key: rabbitmqpassword
                  name: kyoo-scanner
            - name: RABBITMQ_HOST
              value: cluster01.rabbitmq
            - name: RABBITMQ_PORT
              value: "5672"
          image: ghcr.io/zoriya/kyoo_scanner:edge
          name: scanner
          resources:
            requests:
              cpu: 10m
              memory: 500Mi
          volumeMounts:
            - mountPath: /data
              name: media
              readOnly: true
              subPath: media
      volumes:
        - name: media
          persistentVolumeClaim:
            claimName: media
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kyoo-autosync
  namespace: kyoo
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: rabbitmqpassword
      remoteRef:
        key: rabbitmq.cluster01.kyoo-autosync
        property: password
    - secretKey: rabbitmquser
      remoteRef:
        key: rabbitmq.cluster01.kyoo-autosync
        property: username
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kyoo-autosync
  namespace: kyoo
  labels:
    app.kubernetes.io/component: autosync
    app.kubernetes.io/instance: kyoo
    app.kubernetes.io/name: kyoo
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/component: autosync
      app.kubernetes.io/name: kyoo
      app.kubernetes.io/instance: kyoo
  template:
    metadata:
      labels:
        app.kubernetes.io/component: autosync
        app.kubernetes.io/instance: kyoo
        app.kubernetes.io/name: kyoo
    spec:
      containers:
        - env:
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:
                  key: rabbitmquser
                  name: kyoo-autosync
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  key: rabbitmqpassword
                  name: kyoo-autosync
            - name: RABBITMQ_HOST
              value: cluster01.rabbitmq
            - name: RABBITMQ_PORT
              value: "5672"
          image: ghcr.io/zoriya/kyoo_autosync:edge
          name: autosync
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 5m
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kyoo-frontend
  namespace: kyoo
  labels:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: kyoo
    app.kubernetes.io/name: kyoo
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/component: frontend
      app.kubernetes.io/name: kyoo
      app.kubernetes.io/instance: kyoo
  template:
    metadata:
      labels:
        app.kubernetes.io/component: frontend
        app.kubernetes.io/instance: kyoo
        app.kubernetes.io/name: kyoo
    spec:
      containers:
        - env:
            # this is used for URL rewrite inside of the application
            - name: KYOO_URL
              value: http://backend.kyoo:5000
          image: ghcr.io/zoriya/kyoo_front:edge
          name: frontend
          ports:
            - name: http
              containerPort: 8901
              protocol: TCP
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 5m
              memory: 100Mi
      #     volumeMounts:
      #       - mountPath: /data
      #         name: media
      #         readOnly: true
      #         subPath: media
      # # does this really need a mount?
      # volumes:
      #   - name: media
      #     persistentVolumeClaim:
      #       claimName: media
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: kyoo
  labels:
    app.kubernetes.io/instance: kyoo
    app.kubernetes.io/name: kyoo
    app.kubernetes.io/service: kyoo-frontend
spec:
  type: ClusterIP
  ports:
    - port: 8901
      targetPort: 8901
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: kyoo
    app.kubernetes.io/name: kyoo
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: backend
  namespace: kyoo
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "3Gi"
  storageClassName: "longhorn"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: media
  namespace: kyoo
spec:
  accessModes:
    # need to switch to readwritemany/nfs
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "3Gi"
  storageClassName: "longhorn"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: transcoder
  namespace: kyoo
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "3Gi"
  storageClassName: "longhorn"
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: kyoo
  namespace: kyoo
  annotations:
    external-dns.custom/type: private
spec:
  endpoints:
    - dnsName: kyoo.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: kyoo
  namespace: kyoo
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  - name: external
    namespace: gateway
    sectionName: https
  hostnames:
  - "kyoo.<path:stringreplacesecret#domain>"
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /api
    backendRefs:
    - name: backend
      port: 5000
    filters:
      - type: URLRewrite
        urlRewrite:
          path:
            type: ReplacePrefixMatch
            replacePrefixMatch: /
  - matches:
    - path:
        type: PathPrefix
        value: /
    backendRefs:
    - name: frontend
      port: 8901