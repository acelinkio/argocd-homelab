---
kind: Namespace
apiVersion: v1
metadata:
  name: test-zone
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo
  namespace: test-zone
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: echo
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: echo
    spec:
      containers:
        - image: ealen/echo-server
          imagePullPolicy: Always
          name: echo
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: echo
  namespace: test-zone
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  selector:
    app.kubernetes.io/name: echo
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: echo
  namespace: test-zone
spec:
  ingressClassName: ingress-nginx-internal
  rules:
    - host: echo.<path:stringreplacesecret#domain>
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: echo
                port:
                  number: 80
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: echo
  namespace: test-zone
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  hostnames:
  - "echo.<path:stringreplacesecret#domain>"
  rules:
  - backendRefs:
    - name: echo
      port: 80
      filters:
      - requestHeaderModifier:
          add:
          - name: mytestheader1backend1
            value: "setviahttproute"
        type: RequestHeaderModifier
    filters:
    - type: URLRewrite
      urlRewrite:
        hostname: why.hello.there
    - requestHeaderModifier:
        set:
        - name: mytestheader1all
          value: "setviahttproute"
        - name: mytestheader2all
          value: "setviahttproute"
      type: RequestHeaderModifier
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: echo
  namespace: test-zone
  annotations:
    external-dns.custom/type: private
spec:
  endpoints:
    - dnsName: echo.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
  namespace: test-zone
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: httpbin
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: httpbin
    spec:
      containers:
        - image: kong/httpbin
          imagePullPolicy: Always
          name: httpbin
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  namespace: test-zone
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  selector:
    app.kubernetes.io/name: httpbin
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: httpbin
  namespace: test-zone
spec:
  ingressClassName: ingress-nginx-internal
  rules:
    - host: httpbin.<path:stringreplacesecret#domain>
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: httpbin
                port:
                  number: 80
---
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: httpbin
  namespace: test-zone
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  hostnames:
  - "httpbin.<path:stringreplacesecret#domain>"
  rules:
  - backendRefs:
    - name: httpbin
      port: 80
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: httpbin
  namespace: test-zone
  annotations:
    external-dns.custom/type: private
spec:
  endpoints:
    - dnsName: httpbin.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"