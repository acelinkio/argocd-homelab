## Goal is to only initially deploy argocd with minimal configurations
## Once deployed, argocd can manage itself
## https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#manage-argo-cd-using-argo-cd
kind: Namespace
apiVersion: v1
metadata:
  name: argocd
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sso
  namespace: argocd
  labels:
    app.kubernetes.io/part-of: argocd
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: token
      remoteRef:
        key: sso
        property: argocd
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cmp-plugin
  namespace: argocd
data:
  avp-directory-include.yaml: |
    apiVersion: argoproj.io/v1alpha1
    kind: ConfigManagementPlugin
    metadata:
      name: avp-directory-include
    spec:
      allowConcurrency: true
      generate:
        command:
          - bash
          - "-c"
          - |
            argocd-vault-plugin generate $ARGOCD_ENV_FILE_NAME
      lockRepo: false
  kustomize-inline.yaml: |
    apiVersion: argoproj.io/v1alpha1
    kind: ConfigManagementPlugin
    metadata:
      name: kustomize-inline
    spec:
      allowConcurrency: true
      generate:
        command:
          - /bin/sh
          - -c
        args:
          - |
            echo "$ARGOCD_ENV_KUSTOMIZATION_YAML" > kustomization.yaml;
            kustomize build
      lockRepo: false
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd
  namespace: argocd
spec:
  destination:
    namespace: argocd
    server: https://kubernetes.default.svc
  project: homelab
  source:
    chart: argo-cd
    repoURL: https://argoproj.github.io/argo-helm
    targetRevision: 5.43.0
    helm:
      values: |
        configs:
          params:
            server.insecure: true
          cm:
            resource.compareoptions: |
              ignoreAggregatedRoles: true
            url: "http://argocd.<path:stringreplacesecret#domain>"
            dex.config: |
              connectors:
                - type: oidc
                  name: authentik
                  id: authentik
                  config:
                    issuer: http://authentik.<path:stringreplacesecret#domain>/application/o/argocd/
                    clientID: argocd
                    clientSecret: $sso:token
                    insecureEnableGroups: true
                    scopes:
                      - openid
                      - profile
                      - email
          rbac:
            policy.csv: |
              g, ArgoCD Admin, role:admin
        repoServer:
          rbac:
            - apiGroups: [""]
              resources: ["secrets"]
              verbs: ["get", "watch", "list"]
          volumes:
            - name: cmp-plugin
              configMap:
                name: cmp-plugin
            - name: custom-tools
              emptyDir: {}
            - name: cmp-tmp
              emptyDir: {}
          deploymentAnnotations:
            reloader.stakater.com/auto: "true"
          initContainers:
            - name: download-tools
              image: registry.access.redhat.com/ubi8
              env:
                - name: AVP_VERSION
                  value: 1.16.0
              command: [sh, -c]
              args:
                - >-
                  curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_$(arch | sed s/aarch64/arm64/ | sed s/x86_64/amd64/) -o argocd-vault-plugin &&
                  chmod +x argocd-vault-plugin &&
                  mv argocd-vault-plugin /custom-tools/
              volumeMounts:
                - mountPath: /custom-tools
                  name: custom-tools
          extraContainers:
            - name: plugin-avp-directory-include
              command: [/var/run/argocd/argocd-cmp-server]
              image: "{{ default .Values.global.image.repository .Values.server.image.repository }}:{{ default (include \"argo-cd.defaultTag\" .) .Values.server.image.tag }}"
              env:
              - name: AVP_TYPE
                value: kubernetessecret
              securityContext:
                runAsNonRoot: true
                runAsUser: 999
              volumeMounts:
                - mountPath: /var/run/argocd
                  name: var-files
                - mountPath: /home/argocd/cmp-server/plugins
                  name: plugins
                - mountPath: /tmp
                  name: cmp-tmp
                - mountPath: /home/argocd/cmp-server/config/plugin.yaml
                  subPath: avp-directory-include.yaml
                  name: cmp-plugin
                - name: custom-tools
                  subPath: argocd-vault-plugin
                  mountPath: /usr/local/bin/argocd-vault-plugin
            - name: plugin-kustomize-inline
              command: [/var/run/argocd/argocd-cmp-server]
              image: "{{ default .Values.global.image.repository .Values.server.image.repository }}:{{ default (include \"argo-cd.defaultTag\" .) .Values.server.image.tag }}"
              securityContext:
                runAsNonRoot: true
                runAsUser: 999
              volumeMounts:
                - mountPath: /var/run/argocd
                  name: var-files
                - mountPath: /home/argocd/cmp-server/plugins
                  name: plugins
                - mountPath: /tmp
                  name: cmp-tmp
                - mountPath: /home/argocd/cmp-server/config/plugin.yaml
                  subPath: kustomize-inline.yaml
                  name: cmp-plugin
  syncPolicy:
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: stringreplacesecret
  namespace: argocd
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: domain
      remoteRef:
        key: stringreplacesecret
        property: domain
    - secretKey: cloudflaretunnelid
      remoteRef:
        key: stringreplacesecret
        property: cloudflaretunnelid
    - secretKey: metallbpooladdress
      remoteRef:
        key: stringreplacesecret
        property: metallbpooladdress