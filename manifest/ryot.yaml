---
kind: Namespace
apiVersion: v1
metadata:
  name: ryot
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ryot-configsecrets
  namespace: ryot
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: postgrespassword
      remoteRef:
        key: postgres.cluster01.ryot.owner
        property: password
    - secretKey: postgresuser
      remoteRef:
        key: postgres.cluster01.ryot.owner
        property: username
    - secretKey: twitch_client_id
      remoteRef:
        key: ryot
        property: twitch_client_id
    - secretKey: twitch_client_secret
      remoteRef:
        key: ryot
        property: twitch_client_secret
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sso
  namespace: ryot
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: client_id
      remoteRef:
        key: sso
        property: ryot_client_id
    - secretKey: client_secret
      remoteRef:
        key: sso
        property: ryot_client_secret
---
apiVersion: v1
kind: Service
metadata:
  name: ryot
  namespace: ryot
  labels:
    app.kubernetes.io/instance: ryot
    app.kubernetes.io/name: ryot
    app.kubernetes.io/service: ryot
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/instance: ryot
    app.kubernetes.io/name: ryot
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ryot
  namespace: ryot
  labels:
    app.kubernetes.io/instance: ryot
    app.kubernetes.io/name: ryot
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: ryot
      app.kubernetes.io/instance: ryot
  template:
    metadata:
      labels: 
        app.kubernetes.io/instance: ryot
        app.kubernetes.io/name: ryot
    spec:
      containers: 
        - env:
          - name: FRONTEND_URL
            value: "https://ryot.<path:stringreplacesecret#domain>"
          - name: SERVER_OIDC_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: client_id
                name: sso
          - name: SERVER_OIDC_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: client_secret
                name: sso
          - name: SERVER_OIDC_ISSUER_URL
            value: "https://auth.<path:stringreplacesecret#domain>/application/o/ryot/"
          - name: HELPERVAR_POSTGRES_USER
            valueFrom:
              secretKeyRef:
                key: postgresuser
                name: ryot-configsecrets
          - name: HELPERVAR_POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgrespassword
                name: ryot-configsecrets
          - name: VIDEO_GAMES_TWITCH_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: twitch_client_id
                name: ryot-configsecrets
          - name: VIDEO_GAMES_TWITCH_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: twitch_client_secret
                name: ryot-configsecrets
          - name: DATABASE_URL
            value: "postgres://$(HELPERVAR_POSTGRES_USER):$(HELPERVAR_POSTGRES_PASSWORD)@cluster01.postgres/ryot"
          image: ghcr.io/ignisda/ryot:v5.3.0
          name: main
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ryot
  namespace: ryot
spec:
  ingressClassName: ingress-nginx-internal
  rules:
    - host: "ryot.acelink.io"
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: ryot
                port:
                  number: 8000
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: ryot
  namespace: ryot
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  - name: external
    namespace: gateway
    sectionName: https
  hostnames:
  - "ryot.<path:stringreplacesecret#domain>"
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    backendRefs:
    - name: ryot
      port: 80
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: ryot
  namespace: ryot
  annotations:
    external-dns.custom/type: private
spec:
  endpoints:
    - dnsName: ryot.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - ingress.<path:stringreplacesecret#domain>
      # providerSpecific:
      #   - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
      #     value: "false"