---
kind: Namespace
apiVersion: v1
metadata:
  name: observability
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sso
  namespace: observability
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: grafana_client_id
      remoteRef:
        key: sso
        property: grafana_client_id
    - secretKey: grafana_client_secret
      remoteRef:
        key: sso
        property: grafana_client_secret
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: grafana
  namespace: argocd
spec:
  destination:
    namespace: observability
    server: https://kubernetes.default.svc
  project: homelab
  source:
    chart: grafana
    repoURL: https://grafana.github.io/helm-charts
    targetRevision: 7.3.11
    helm:
      valuesObject:
        adminUser: admin
        datasources:
          datasources.yaml:
            apiVersion: 1
            deleteDatasources:
              - { name: Alertmanager, orgId: 1 }
              - { name: Loki, orgId: 1 }
              - { name: Prometheus, orgId: 1 }
            datasources:
              - name: Prometheus
                type: prometheus
                uid: prometheus
                access: proxy
                url: http://kube-prometheus-stack-prometheus.observability.svc.cluster.local:9090
                isDefault: true
              - name: Loki
                type: loki
                uid: loki
                access: proxy
                url: http://loki-gateway.observability.svc.cluster.local
                jsonData:
                  maxLines: 250
        env:
          GF_SERVER_ROOT_URL: "https://grafana.<path:stringreplacesecret#domain>"
          GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
          GF_AUTH_GENERIC_OAUTH_AUTO_LOGIN: "true"
          GF_AUTH_GENERIC_OAUTH_NAME: "authentik"
          GF_AUTH_GENERIC_OAUTH_SCOPES: "openid profile email offline_access"
          GF_AUTH_GENERIC_OAUTH_AUTH_URL: "https://auth.<path:stringreplacesecret#domain>/application/o/authorize/"
          GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "https://auth.<path:stringreplacesecret#domain>/application/o/token/"
          GF_AUTH_GENERIC_OAUTH_API_URL: "https://auth.<path:stringreplacesecret#domain>/application/o/userinfo/"
          GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: "contains(groups[*], 'Grafana Admin') && 'Admin' || 'Viewer'"
        envValueFrom:
          GF_AUTH_GENERIC_OAUTH_CLIENT_ID:
            secretKeyRef:
              key: grafana_client_id
              name: sso
          GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET:
            secretKeyRef:
              key: grafana_client_secret
              name: sso
  syncPolicy:
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana
  namespace: observability
spec:
  ingressClassName: ingress-nginx-internal
  rules:
    - host: grafana.<path:stringreplacesecret#domain>
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 80
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: grafana
  namespace: observability
spec:
  parentRefs:
  - name: internal
    namespace: gateway
    sectionName: https
  - name: external
    namespace: gateway
    sectionName: https
  hostnames:
  - "grafana.<path:stringreplacesecret#domain>"
  rules:
  - backendRefs:
    - name: grafana
      port: 80
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: grafana
  namespace: observability
  annotations:
    external-dns.custom/type: private
spec:
  endpoints:
    - dnsName: grafana.<path:stringreplacesecret#domain>
      recordType: CNAME
      targets:
        - intgw.<path:stringreplacesecret#domain>
      providerSpecific:
        - name: external-dns.alpha.kubernetes.io/cloudflare-proxied
          value: "false"
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  namespace: argocd
spec:
  destination:
    namespace: observability
    server: https://kubernetes.default.svc
  project: homelab
  source:
    chart: kube-prometheus-stack
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 58.5.2
    helm:
      valuesObject:
        grafana:
          enabled: false
        kubeApiServer:
          enabled: true
        kubelet:
          enabled: false
        kubeControllerManager:
          enabled: false
        kubeEtcd:
          enabled: false
        kubeScheduler:
          enabled: false
        kubeProxy:
          enabled: false
        prometheus:
          prometheusSpec:
            retention: 1d
  syncPolicy:
    syncOptions:
      - ServerSideApply=true
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: loki
  namespace: argocd
spec:
  destination:
    namespace: observability
    server: https://kubernetes.default.svc
  project: homelab
  source:
    chart: loki
    repoURL: https://grafana.github.io/helm-charts
    targetRevision: 6.5.2
    helm:
      valuesObject:
        deploymentMode: SingleBinary
        backend:
          replicas: 0
        read:
          replicas: 0
        write:
          replicas: 0
        loki:
          auth_enabled: false
          schemaConfig:
            configs:
              - from: 2024-04-20
                store: tsdb
                object_store: filesystem
                schema: v13
                index:
                  prefix: index_
                  period: 24h
          commonConfig:
            replication_factor: 1
          storage:
            type: 'filesystem'
        singleBinary:
          replicas: 1
  syncPolicy:
    syncOptions:
      - ServerSideApply=true
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: fluentbit
  namespace: argocd
spec:
  destination:
    namespace: observability
    server: https://kubernetes.default.svc
  project: homelab
  source:
    chart: fluent-bit
    repoURL: https://fluent.github.io/helm-charts
    targetRevision: 0.46.5
    helm:
      valuesObject:
        config:
          outputs: |
            [OUTPUT]
                name                   loki
                match                  *
                host                   loki-gateway.observability.svc.cluster.local
                port                   80
                labels                 job=fluentbit
                auto_kubernetes_labels on
  syncPolicy:
    syncOptions:
      - ServerSideApply=true
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true